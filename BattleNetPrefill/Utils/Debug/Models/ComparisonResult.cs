using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using ByteSizeLib;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Spectre.Console;

namespace BattleNetPrefill.Utils.Debug.Models
{
    //TODO comment what these fields mean
    public class ComparisonResult
    {
        public TimeSpan ElapsedTime { get; set; }

        /// <summary>
        /// A list of all requests generated by our application.
        /// </summary>
        public List<Request> GeneratedRequests { get; set; }

        public List<Request> RealRequests { get; set; }

        public int RequestMadeCount => GeneratedRequests.Count;
        public int RealRequestCount => RealRequests.Count;

        public List<Request> Misses { get; set; }
        public List<Request> UnnecessaryRequests { get; set; }

        public ByteSize GeneratedRequestTotalSize => ByteSize.FromBytes((double) GeneratedRequests.Sum(e => e.TotalBytes));
        public ByteSize RealRequestsTotalSize => ByteSize.FromBytes((double)RealRequests.Sum(e => e.TotalBytes));

        public int RequestsWithoutSize { get; set; }
        public int RealRequestsWithoutSize { get; set; }

        public int MissCount => Misses.Count;

        public void SaveToDisk(string baseUri)
        {
            var jsonSettings = new JsonConverter[] { new StringEnumConverter() };
          
            File.WriteAllText($@"{baseUri}\misses.json", JsonConvert.SerializeObject(Misses, 
                Formatting.Indented, jsonSettings));
            File.WriteAllText($@"{baseUri}\excess.json", JsonConvert.SerializeObject(UnnecessaryRequests,
                Formatting.Indented, jsonSettings));
        }

        public void PrintOutput()
        {
            // Formatting output to table
            var table = new Table();
            table.AddColumn(new TableColumn("").LeftAligned());
            table.AddColumn(new TableColumn(SpectreColors.Blue("Current")).Centered());
            table.AddColumn(new TableColumn(SpectreColors.Blue("Expected")).Centered());

            table.AddRow("Requests made", RequestMadeCount.ToString(), RealRequestCount.ToString());
            table.AddRow("Bandwidth required", GeneratedRequestTotalSize.ToString(), RealRequestsTotalSize.ToString());
            table.AddRow("Requests missing size", SpectreColors.Yellow(RequestsWithoutSize.ToString()), RealRequestsWithoutSize.ToString());
            AnsiConsole.Write(table);

            AnsiConsole.WriteLine($"Total Misses     : {Colors.Red(MissCount)}");
            AnsiConsole.WriteLine($"Misses Bandwidth : {Colors.Red(ByteSize.FromBytes(Misses.Sum(e => e.TotalBytes)))}");
            AnsiConsole.WriteLine();

            AnsiConsole.WriteLine($"Unnecessary Requests : {Colors.Yellow(UnnecessaryRequests.Count)}");
            AnsiConsole.WriteLine($"Wasted bandwidth     : {Colors.Yellow(ByteSize.FromBytes(UnnecessaryRequests.Sum(e => e.TotalBytes)))}");
            AnsiConsole.WriteLine();
        }
    }
}
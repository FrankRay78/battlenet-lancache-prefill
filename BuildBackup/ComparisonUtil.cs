using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using AutoMapper;
using BuildBackup.DebugUtil;
using ByteSizeLib;
using Konsole;
using Newtonsoft.Json;
using Shared;
using Shared.Models;
using Colors = Shared.Colors;

namespace BuildBackup
{
    public class ComparisonUtil
    {
        private readonly IConsole _console;
        private readonly Mapper mapper;

        //TODO extract url to settings
        string _blizzardCdnBaseUri = "http://level3.blizzard.com";
        public ComparisonUtil(IConsole console)
        {
            this._console = console;
            var mapperConfig = new MapperConfiguration(cfg => cfg.CreateMap<Request, ComparedRequest>());
            mapper = new Mapper(mapperConfig);
        }
        
        public ComparisonResult CompareAgainstRealRequests(List<Request> allRequestsMade, TactProduct product)
        {
            var fileSizeProvider = new FileSizeProvider(product);

            Console.WriteLine("Comparing requests against real request logs...");
            var timer = Stopwatch.StartNew();

            PreLoadHeaderSizes(allRequestsMade, product);

            //TODO re-implement coalescing + dedupe.  However this messes with the FullDownloadProperty
            //allRequestsMade = NginxLogParser.CoalesceRequests(allRequestsMade);

            if (allRequestsMade.Any(e => e == null))
            {
                //TODO debug this, probably a threading issue.
                Console.WriteLine(Colors.Red("Some requests are null!!"));
                Debugger.Break();
            }
            allRequestsMade = allRequestsMade.Where(e => e != null).ToList();

            var realRequests = NginxLogParser.ParseRequestLogs(Config.LogFileBasePath, product);
            //var realRequestMatches = DiffRequests(allRequestsMade, realRequests);

            var duplicates = allRequestsMade.GroupBy(e => new {e.LowerByteRange, e.UpperByteRange, e.Uri}).Where(e => e.Count() > 1).ToList();

            var diffResult = FindExcessRequests(allRequestsMade, realRequests, fileSizeProvider);

            var comparisonResult = new ComparisonResult
            {
                Hits = diffResult.MatchedRequests,
                Misses = diffResult.MissedRequests,
                UnnecessaryRequests = diffResult.UnnecessaryRequests,

                RequestMadeCount = allRequestsMade.Count,
                DuplicateRequests = duplicates.Count,
                RealRequestCount = realRequests.Count,

                RequestTotalSize = CalculateRequestSizes(allRequestsMade, product),
                RealRequestsTotalSize = ByteSize.FromBytes((double)realRequests.Sum(e => e.TotalBytes)),

                RequestsWithoutSize = allRequestsMade.Count(e => e.TotalBytes == 0),
                RealRequestsWithoutSize = realRequests.Count(e => e.TotalBytes == 0)
            };

            comparisonResult.PrintOutput();

            Console.WriteLine($"Comparison complete! {Colors.Yellow(timer.Elapsed.ToString(@"mm\:ss\.FFFF"))}");
            return comparisonResult;
        }

        private DiffResults FindExcessRequests(List<Request> requests, List<Request> realRequests, FileSizeProvider fileSizeProvider)
        {
            var deduped = requests.ToList();
            //var deduped = requests.GroupBy(e => new {e.LowerByteRange, e.UpperByteRange, e.Uri}).Select(e => e.First()).ToList();
            // Making a copy of the requests our app made.  
            var generatedRequests = FastDeepCloner.DeepCloner.Clone(deduped);
            // Updating the byte range requested, so we can later determine what parts of the request are unnecessary
            foreach (var request in generatedRequests)
            {
                if (request.DownloadWholeFile)
                {
                    request.DownloadWholeFile = false;
                    request.LowerByteRange = 0;
                    // Subtracting 1, because it seems like the byte ranges are "inclusive".  Ex range 0-9 == 10 bytes length.
                    request.UpperByteRange = fileSizeProvider.GetContentLength(new Uri($"{_blizzardCdnBaseUri}/{request.Uri}")) - 1;
                }
            }
            fileSizeProvider.Save();

            // These are going to be the actual requests generated by Battle.net.  Will mark them as either matched/unmatched
            var realRequestsMatched = realRequests.Select(e => mapper.Map<ComparedRequest>(e)).ToList();

            // Taking each "real" request, and "subtracting" it from the requests our app made.  Hoping to figure out what excess is being left behind.
            foreach (var realReq in realRequestsMatched)
            {
                // Exact match, simply remove from the list and marked as found
                var exactMatches = generatedRequests.Where(e => e.Uri == realReq.Uri
                                                              && e.LowerByteRange == realReq.LowerByteRange
                                                              && e.UpperByteRange == realReq.UpperByteRange).ToList();
                if (exactMatches.Any())
                {
                    if (exactMatches.Count > 1)
                    {
                        //TODO
                        //Debugger.Break();
                    }
                    realReq.Matched = true;
                    generatedRequests.Remove(exactMatches[0]);
                    continue;
                }
                var rangeMatches = generatedRequests.Where(e => e.Uri == realReq.Uri
                                                              && realReq.LowerByteRange >= e.LowerByteRange 
                                                              && realReq.UpperByteRange <= e.UpperByteRange).ToList();
                if (rangeMatches.Any())
                {
                    if (rangeMatches.Count > 1)
                    {
                        //TODO how do I handle this scenario?
                    }
                    // Breaking up into two new slices
                    var lowerSlice = new Request
                    {
                        Uri = rangeMatches[0].Uri,
                        LowerByteRange = rangeMatches[0].LowerByteRange,
                        UpperByteRange = realReq.LowerByteRange - 1,
                        CallingMethod = rangeMatches[0].CallingMethod
                    };
                    var upperSlice = new Request
                    {
                        Uri = rangeMatches[0].Uri,
                        LowerByteRange = realReq.UpperByteRange + 1,
                        UpperByteRange = rangeMatches[0].UpperByteRange,
                        CallingMethod = rangeMatches[0].CallingMethod
                    };
                    generatedRequests.Add(lowerSlice);
                    generatedRequests.Add(upperSlice);

                    realReq.Matched = true;
                    generatedRequests.Remove(rangeMatches[0]);
                    continue;
                }
                // Special case for indexes
                if (realReq.Uri.Contains(".index"))
                {
                    var indexMatches = generatedRequests.Where(e => e.Uri == realReq.Uri).ToList();
                    if (indexMatches.Any())
                    {
                        realReq.Matched = true;
                        generatedRequests.Remove(indexMatches[0]);
                    }
                   
                    continue;
                }
            }

            var findExcessRequests = new DiffResults()
            {
                MatchedRequests = realRequestsMatched.Where(e => e.Matched).ToList(),
                MissedRequests = realRequestsMatched.Where(e => e.Matched == false).OrderBy(e => e.Uri).ThenBy(e => e.LowerByteRange).ToList(),

                UnnecessaryRequests = generatedRequests.ToList()
            };

            var missedGroups = findExcessRequests.MissedRequests.GroupBy(e => e.Uri).Where(e => e.Count() > 10).OrderByDescending(e => e.Count()).ToList();
            foreach (var group in missedGroups)
            {
                Console.WriteLine($"Missed {Colors.Yellow(group.Count())} requests for uri {Colors.Magenta(group.Key)} Size : {ByteSize.FromBytes(group.Sum(e => e.TotalBytes))}");
            }

            File.Delete(@"C:\Users\Tim\Dropbox\Programming\dotnet-public\BattleNetBackup\allRequests.json");
            File.WriteAllText(@"C:\Users\Tim\Dropbox\Programming\dotnet-public\BattleNetBackup\allRequests.json", JsonConvert.SerializeObject(requests));

            File.Delete(@"C:\Users\Tim\Dropbox\Programming\dotnet-public\BattleNetBackup\excessRequests.json");
            File.WriteAllText(@"C:\Users\Tim\Dropbox\Programming\dotnet-public\BattleNetBackup\excessRequests.json", JsonConvert.SerializeObject(generatedRequests.ToList()));

            return findExcessRequests;
        }

        //TODO comment
        private List<ComparedRequest> DiffRequests(List<Request> allRequestsMade, List<Request> targetRequests)
        {
            List<ComparedRequest> matches = targetRequests.Select(e => mapper.Map<ComparedRequest>(e)).ToList();
            foreach (var realRequest in matches)
            {
                // Finding any requests that match on URI
                var uriMatches = allRequestsMade.Where(e => e.Uri == realRequest.Uri).ToList();

                // Handle each one of the matches
                foreach (var match in uriMatches)
                {
                    if (match.DownloadWholeFile)
                    {
                        realRequest.Matched = true;
                        realRequest.MatchedRequest = match;
                    }
                    else
                    {
                        //Debugger.Break();
                    }
                }
            }

            return matches;
        }

        private void PreLoadHeaderSizes(List<Request> requests, TactProduct product)
        {
            //TODO log that this is processing X of N 
            //TODO speed up the initial processing
            var fileSizeProvider = new FileSizeProvider(product);

            // Speeding up by pre-caching the content-length headers in parallel.
            var wholeFileRequests = requests.Where(e => e.DownloadWholeFile).OrderBy(e => e.Uri).ToList();

            var progressBar = new ProgressBar(_console, PbStyle.SingleLine, wholeFileRequests.Count, 50);
            int count = 0;
            Parallel.ForEach(wholeFileRequests, new ParallelOptions { MaxDegreeOfParallelism = 20 }, request =>
            {
                fileSizeProvider.GetContentLength(new Uri($"{_blizzardCdnBaseUri}/{request.Uri}"));
                progressBar.Refresh(count, $"Getting request sizes");
                count++;
            });
            fileSizeProvider.Save();
        }

        private ByteSize CalculateRequestSizes(List<Request> requests, TactProduct product)
        {
            //TODO log that this is processing X of N 
            //TODO speed up the initial processing
            var fileSizeProvider = new FileSizeProvider(product);
            
            // Speeding up by pre-caching the content-length headers in parallel.
            var wholeFileRequests = requests.Where(e => e.DownloadWholeFile).OrderBy(e => e.Uri).ToList();
            Parallel.ForEach(wholeFileRequests, new ParallelOptions { MaxDegreeOfParallelism = 20 }, request =>
            {
                fileSizeProvider.GetContentLength(new Uri($"{_blizzardCdnBaseUri}/{request.Uri}"));
            });
            fileSizeProvider.Save();

            // Actually summing up the total request size
            long totalBytes = requests.Sum(e => e.TotalBytes);
            foreach (var request in wholeFileRequests)
            {
                totalBytes += fileSizeProvider.GetContentLength(new Uri($"{_blizzardCdnBaseUri}/{request.Uri}"));
            }
            
            return ByteSize.FromBytes(totalBytes);
        }
    }
}
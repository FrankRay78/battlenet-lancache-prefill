using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.IO.Compression;
using System.Linq;
using System.Text.RegularExpressions;
using BuildBackup.DebugUtil.Models;
using Newtonsoft.Json;
using Shared;

namespace BuildBackup.DebugUtil
{
    public static class NginxLogParser
    {
        /// <summary>
        /// Gets the most recently saved request logs for the specified product.  The request logs will be generated by installing a product (ex. Starcraft)
        /// using the Battle.Net client, and then saving off the logged requests from Nginx.  These request files can then be compared against, to verify if
        /// our application is making the same requests as Battle.Net, without actually having to make the requests (saves bandwidth and time)
        /// </summary>
        /// <param name="logBasePath">Root folder where all log files are stored.</param>
        /// <param name="product">Target product to be parsed.  Used to determine subfolder to search for files</param>
        /// <returns>A list of all requests made by the real Battle.Net client.</returns>
        public static List<Request> GetSavedRequestLogs(string logBasePath, TactProduct product)
        {
            var timer = Stopwatch.StartNew();
            var logFolder = $@"{logBasePath}\{product.DisplayName}";

            var latestFile = new DirectoryInfo(logFolder)
                                    .GetFiles()
                                    .OrderByDescending(e => e.LastWriteTime)
                                    .FirstOrDefault();

            // Loading the pre-computed log file if it exists, speeds up subsequent runs
            if (latestFile.FullName.Contains("coalesced"))
            {
                var deserializedRequests = JsonConvert.DeserializeObject<List<Request>>(File.ReadAllText(latestFile.FullName));
                Console.WriteLine($"Parsed request logs in {Colors.Yellow(timer.Elapsed.ToString(@"ss\.FFFF"))}");

                return deserializedRequests;
            }

            if (latestFile.Extension == ".zip")
            {
                // Extract the logs, so that we can read them while debugging
                ZipFile.ExtractToDirectory(latestFile.FullName, latestFile.Directory.FullName, true);
                var logFilePath = latestFile.FullName.Replace(".zip", ".log");

                var rawLogs = ParseRequestLogs(File.ReadAllLines(logFilePath));
                List<Request> requestsToReplay = CoalesceRequests(rawLogs);

                // Save the coalesced results to speed up future runs
                var coalescedFileName = $"{logFolder}\\{latestFile.Name.Replace(".zip", ".coalesced.log")}";
                File.WriteAllText(coalescedFileName, JsonConvert.SerializeObject(requestsToReplay));

                Console.WriteLine($"Parsed request logs in {Colors.Yellow(timer.Elapsed.ToString(@"ss\.FFFF"))}");
                return requestsToReplay;
            }

            throw new FileNotFoundException($"Unable to find replay logs for {product.DisplayName}");
        }

        //TODO comment
        private static List<Request> ParseRequestLogs(string[] rawRequests)
        {
            var parsedRequests = new List<Request>();

            // Only interested in GET requests from Battle.Net.  Filtering out any other requests from other clients like Steam
            var filteredRequests = rawRequests.Where(e => e.Contains("GET") && e.Contains("[blizzard]")).ToList();
            foreach (var rawRequest in filteredRequests)
            {
                // Find all matches between double quotes.  This will be the only info that we care about in the request logs.
                var matches = Regex.Matches(rawRequest, "\"(.*?)\"");

                var httpRequest = matches[0].Value;
                // Request byte range will always be the last result
                string byteRange = matches[matches.Count - 1].Value
                    .Replace("bytes=", "")
                    .Replace("\"", "");

                var parsedRequest = new Request()
                {
                    //TODO replace this with a regex
                    // Uri will be the second item.  Example : "GET /tpr/sc1live/data/b5/20/b520b25e5d4b5627025aeba235d60708 HTTP/1.1". 
                    // Will also remove leading slash
                    Uri = httpRequest.Split(" ")[1].Remove(0, 1)
                };

                if (byteRange == "-")
                {
                    parsedRequest.DownloadWholeFile = true;
                }
                else
                {
                    parsedRequest.LowerByteRange = long.Parse(byteRange.Split("-")[0]);
                    parsedRequest.UpperByteRange = long.Parse(byteRange.Split("-")[1]);
                }

                parsedRequests.Add(parsedRequest);
            }

            return parsedRequests;
        }

        //TODO comment
        //TODO test
        public static string GetLatestLogVersionForProduct(string logBasePath, TactProduct product)
        {
            var logFolder = $@"{logBasePath}\{product.DisplayName}";

            var latestFile = new DirectoryInfo(logFolder)
                .GetFiles()
                .Where(e => e.Extension == ".zip")
                .OrderByDescending(e => e.LastWriteTime)
                .FirstOrDefault();

            return latestFile.Name.Replace(".zip", "");
        }

        //TODO comment + unit test
        //TODO move this into a different class
        public static List<Request> CoalesceRequests(List<Request> initialRequests, bool isBattleNetClient = false)
        {
            //TODO handle the case where there are "whole file downloads".  If there is a whole file download, then any other requests should just be removed at this step
            var coalesced = new List<Request>();

            //Coalescing any requests to the same URI that have sequential/overlapping byte ranges.  
            var requestsGroupedByUri = initialRequests.GroupBy(e => e.Uri).ToList();
            foreach (var grouping in requestsGroupedByUri)
            {
                var merged = grouping.OrderBy(e => e.LowerByteRange).MergeOverlapping(isBattleNetClient).ToList();

                coalesced.AddRange(merged);
            }

            return coalesced;
        }

        public static IEnumerable<Request> MergeOverlapping(this IEnumerable<Request> source, bool isBattleNetClient)
        {
            using (var enumerator = source.GetEnumerator())
            {
                if (!enumerator.MoveNext())
                {
                    yield break;
                }

                var previousInterval = enumerator.Current;
                while (enumerator.MoveNext())
                {
                    var nextInterval = enumerator.Current;
                    if (!previousInterval.Overlaps(nextInterval, isBattleNetClient))
                    {
                        yield return previousInterval;
                        previousInterval = nextInterval;
                    }
                    else
                    {
                        previousInterval = previousInterval.MergeWith(nextInterval);
                    }
                }
                yield return previousInterval;
            }
        }
    }
}